
canMove початкова провірка для того шоб ми не могли бити своїх по корольрах

для Figure првірки типу 
if(previosFigureColor === current){
    return false
}
return true

всі дочірні отримують
if(super.canMove()) - тобто в задежності шо певерне ця функція 

cellComponent 
<div onClick={e => click(cell)} style={{backgroundColor: cell.available && cell.figure ? 'green' : ''}} - фігури для биття 
className={['cell', cell.color, selected && !cell.figure ? 'selected' : ''].join(' ')}> і вибір путих фігур 

    {cell.available && !cell.figure && <div className='available'></div>} ходи відображаємо 
    {cell.figure?.logo && <img src={cell.figure?.logo} width={40} height={40} />}

</div>
ми для цьго створюємо available style тобто для показу можливих ходів 
і selected для вибору 


клік 2 рази в BoardComponent
    ми створюємо state для того шоб зробити 2 кліка 
    const [clicked, setClicked] = useState<Cell | null>(null)

    const click = (cell: Cell) => {
        тут ми робимо провірку яка відділяє 2 кліка тобто ми пишемо якшо cell !== clicked і тільки тоді ми йдемо далі 
        і всі вилики з основою clicked для cell (cell це наступний клік)
        if(clicked && cell !== clicked && clicked.figure?.canMove(cell)){
            clicked.moveFigure(cell); тут ми робимо переміщення 
            setClicked(null) обнуляємо стару позицію
        }
        else{
            якшо не виконалося то це 1 клік 
            setClicked(cell)
        }
    }

розберемо метод який переставляє фігури moveFigure
в Cell 
move(figure: Figure){ тут ми займаємося новою клітинокю так як ми викликали цей метод з основою target а це нова клітинка
        this.figure = figure присвоюємо новиу фігуру 
        this.figure.cell = this і для figure.cell беремо цей клас тобто оновлений  
    }
    moveFigure(target: Cell){
        this.figure?.PawnStart(target); цей метод буде потрібен для Pawn перший хід 

        if(this.figure && this.figure?.canMove(target)){ тут ми дивимося чи на 1 клікує фігура і canMove для target
            target.move(this.figure) з основою target передаємо фігуру
            this.figure = null після обнулюємо її 
        }
    }


Примітка ми в class Figure і constructor робимо fluent interface 
для cell 
this.cell.figure = this; для того шоб ми могли отримувати властивості 


і оновлення змін повязані з board 
ми в Board створюємо 2 методи саме оновлення всіх available для кожної клітинки тої шо ми клікнули 1 раз 
і стіворення нового instance 

refresh(target: Cell | null){
    for(let i = 0; i < this.cells.length; i++){
        const row: Cell[] = this.cells[i];
        for(let j = 0; j < row.length; j++){
            let cell = row[i];
            cell.available = !!target.figure.canMove(cell); - переводимо в falsy trufy
        }
    }
}     

createNewInstance(){
    const newBoard = new Board();
    newBoard.cells = this.cells
    return newBoard;
}

далі в BoardComponent

useEffect(() => {
        refresh()
    }, [clicked])

    const refresh = () => {
         board.doRefreshFigures(clicked)
         createNewInstance()
    } 
    const createNewInstance = () => {
        const newBoard = board.createNewInstance();
        setBoard(newBoard)
    }
    при кожному кліку ми робимо оновлення
    і тому зміни будуть відобрежені 


далі розставлення ходів ми основні методи записуємо в Cell 
ми ці методи будемо використовувати в canMove() 
тобто ми будемо вказувати куда можна йти(і де буде відображатися available бо він реагує на кожну зміну)

розставлення ходів для діагоналі 

 moveDiagonal(target: Cell){
    тут dx і dy мусять буди однокові так як це діаганаль і їхня різниця тобто минулого кілку і теперішнього це якраз 
    відстанб між ними
        const dx = Math.abs(target.x - this.x); 
        const dy = Math.abs(target.y - this.y);

        напрямок якшо - то вверх якшо + то вниз  
        const directionX = this.x < target.x ? 1 : -1;    
        const directionY = this.y < target.y ? 1 : -1;

        і якшо вони не рівні то це не діагональ 
        if(dx !== dy){
            return false;
        }
        тут ми до нашого минулого кліку додаємо і * на напрямок і провіряємо чи пусти кожна клітинка якшо ні то ми зразу повертаємо false 
        ми первертаємо ці значення(boolean) бо ці методи будуть використовуватися в canMove а воно працює з available яке приймає true false  
        for (let i = 1; i < dy; i++) {
            if(!this.board.getCell(this.y + (i * directionY), this.x + (i * directionX)).isEmpty()){
                return false;
            }
        }
        return true;
    }

    вертикаль і горизонталь 
    
    moveHorizontal(target: Cell){
        if(target.y !== this.y){ тут має вони дорівнювати бо вони якраз говорять за 1 клітинку то вертикаль і всі погоризонталі 
            return false
        }

        const max = Math.max(target.x, this.x); від меного до більшого 
        const min = Math.min(target.x, this.x);

        for(let i = min + 1; i < max; i++){ так саме перевіряємо 
            if(!this.board.getCell(this.y, i).isEmpty()){
                return false
            }
        }
        return true
    }
    
    moveVertical(target: Cell){
        if(target.x !== this.x){ тут аналогічно 
            return false;
        }

        const max = Math.max(target.y, this.y);
        const min = Math.min(target.y, this.y);

        for (let i = min + 1; i < max; i++) {
             if(!this.board.getCell(i, this.x).isEmpty()){
                return false
             }   
        }
        return true
    }


    для короля ми перевіряємо тільки ходи на 1 по всіх сторонах 
    приклад 
        onst dx = Math.abs(target.x - this.cell.x)
        const dy = Math.abs(target.y - this.cell.y)
        
        if(dx === 1 && dy === 1){
            return true
        }
        if(dx === 1 && dy === 0){
            return true
        }
        if(dx === 0 && dy === 1){
            return true
        }
        return false 
    для коня схоже тільки в нього x i y може бути 1 і 2 або 2 і 1 
    приклад 
        const dx = Math.abs(target.x - this.cell.x);
        const dy = Math.abs(target.y - this.cell.y);

        return (dx === 1 && dy === 2) || (dx === 2 && dy === 1)     


    для пішака тут важливо ми використовуємо super.function(target) для того шоб забезпечити почат роботи 
    тут він має перший хід на 2 або на 1 і якшо фігура є на 1 то на 2 хід заборонений 

    приклад 

        так само ми розбиваємо на ходи - знизу вверх + зверху вниз 
        const stepOne = this.cell.figure?.color === Color.BLACK ? 1 : -1
        const stepTwo = this.cell.figure?.color === Color.BLACK ? 2 : -2
        
        перевірка на клік вперед і на true значення this.secondStep тут або бо потім це значення відпаде 
        і target.y === this.cell.y + stepTwo не буде виконуватися 
        if((target.y === this.cell.y + stepOne || this.secondStep && (target.y === this.cell.y + stepTwo))
        && target.x === this.cell.x){ 1 клік вверх 

            if(target.figure && this.secondStep){ якшо 2 клік тобто перший 
                const firstCell = this.cell.y + stepOne; беремо y
                const secondCell = this.cell.y + stepTwo; і тут 

                тут беремо cell 
                const first = this.cell.board.getCell(firstCell, this.cell.x);
                const second = this.cell.board.getCell(secondCell, this.cell.x);

                якшо на 1 є фігура тоді 2 available = false і змінюємо значення  
                if (first.figure && !second.figure) {
                    this.secondStep = false
                    second.available = false
                }
            }

            тут шоб неможна було бити вперед
            if(target.figure){
                return false;
            }
            return true
        }
        далі удар дивимося крок вперед і чи є фігура і x - 1 i x + 1 перевірка
        доречі крок вперед визначається новий крок === старий + крок з direction
        if(target.y === this.cell.y + stepOne && target.figure && (target.x === this.cell.x + 1 || target.x === this.cell.x - 1)){
            return true
        }
        return false
   }
   public PawnStart(target: Cell){
        super.PawnStart(target) ми після 1 кліку для 1 фігури Pawn disabled подвій крок це для кожної фігури 
        this.secondStep = false
   }

   відображення видалених фігур 
   ми створюємо 2 масива в Board також для відображення змін 
   ми так само робимо як з cells newBoard.cells = this.cells 
   ці масиви в refresh потрбіно зробити так само бо вони будуть відображати постійно 
   зміни 

   далі ми в moveFigure там викоритосвується наступний клік 
   і ми провірками запушуємо в масиви фігури 
   далі ми створюємо компонент і в ньому ми відображаємо наші фігури

   далі про передачу ходу
   ми створюємо class Player який приймає колір  
   ми а App створюємо Player і в конструктор білий колір або null 
   так само з black 

   потім ми стіворюємо такий самий тільки current 
   далі ми в current сетаємо в useEffect(() => {},[]) - білий колір
   стврюємо функцію swapPlayer
   setCurrentColor(currentColor === whiteColor ? blackColor : whiteColor)
   тобто якшо є більий ставимо чорний 

   і в BoardComponent ми передаємо swapPlayer і current 

   далі в BoardComponent 
   swapPlayer - ми викликаємо якшо виконався 2 клік 

   а current ми викоритосвуємо як провірку після 1 кліку 
   тобто тільки тоді коли current.color === cell.figure.color 

    /*
   стіворення шаху і виввід його через alert тобто відображення 
   як правило його протрібно зробити в cell і в методіх для руху фігур 
   тобто якшо попадається король то виводимо alert 
   і також важливо перевіряти на колір  

   так на жаль не вийде бо в нас ця провірка йде після 1 кліку і провіряє на наявнсть 
   і тому в нас після 1 кліку якшо король нашляху воно спрацьовує а нам потрібно після 2 і 
   дивитися відносно короля динамічно 
